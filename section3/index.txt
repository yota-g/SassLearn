変数と演算の基本
18.変数の基本
sassでは変数を使用する事ができる。
変数とは予め好きな名前を決めて、それに値を入れておく事で、好きな名前で、cssの好きな場所からその値を呼び出せるようにする仕組み。

好きな名前を決めることを変数の宣言。
値を決めることを、代入。
値を呼び出すことを参照。

 変数の使い方は、
 #dcafb9のような複雑なカラーコードを様々な場所に書く時覚えたりコピーしたり、場所を間違えて違う色を入れてしまう事がある。
 そうゆう時に変数を設定してあげておく事でcssファイルの中から同じ色のカラーコードを探したり、色違いになったりしなくなる。

 scssで実践する。
 変数を設定するには$をつけて、＄pink:  #dcafb9;
$変数名: 値;とすると設定できる。
 これで変数の宣言と代入ができる。
 参照するには$pinkのように記入する。
 cssを見ると変数に置き換えた部分が値に切り替わっている。
 変数はプロパティに使用する。
 変数のメリットは複数の箇所の設定を変えたい時に変数を変更するだけで、全ての箇所を変更する事ができる。

 cssは全検索して全選択して全変換しないといけないが、sassだと変数の値を変更すると対象のものを全て変更できる。

 変数には決まりがある。
 使える文字と使えない文字がある。
 使える文字：-と_と半角英数字その他の記号は使用できない。マルチバイト文字を使用できるので全角英数や日本語でも大丈夫。
$_pink,$-pink1,$ピンクでも大丈夫。
ただし、全角の変数は嫌がられる。

使えない変数名：数字から始まる変数名は使用できない。

19.変数のスコープ
変数には参照できる範囲があって、その参照範囲がスコープ。
変数は宣言した場所によって範囲が決まる。

変数を宣言した前ではその変数は参照できない。
sassは ソースコードの前から読み込まれていくから。

section {
  margin-bottom: $marginBottom;
  p { 
    padding: 10px;
  }
}

$marginBottom: 30px;

こうするとmarginBottomという変数が存在しませんというエラーが出る。
コードを上に戻すとエラーがなくなる。

変数をルールセットの外にセットしていたが、ルールセットの中にもセットする事ができる。

外で設定したのをグローバル変数。中でセットしたのをローカル変数と呼ぶこともある。

ルールセットの中でセットした場合、ルールセットの外からは参照できない。
sectionのなかで変数を宣言すると、

section {
  $value: 20px;
  margin-bottom: $marginBottom;
  p { 
    padding: $value;
  }
}

.footer {
  padding: $value;
}

footerでは$valueは参照できないのでエラーが発生する

ローカル変数でセットするとルールセットが異なれば変数名が同じで別の変数として扱われるのでセットできる。

グローバル変数とローカル変数名が同じ場合はどうなるのか。
実際に確認していく。
$value: 30px;

section {
  margin-bottom: $value;
  $value: 70px;
  p { 
    padding: $value;
  }
}
.footer {
  $value: 50px;
  padding: $value;
}

こうすると、ローカル変数を宣言する位置によって参照箇所が異なる。
ローカル変数宣言後の変数だとローカル変数を参照。
ローカル変数宣言前だとグローバル変数を参照するという結論になる。　

グローバル変数とローカル変数がバッティングした場合どちらの変数が参照されているのかがややこしくなるので注意が必要。

20.演算の基本
sassではプロパティの値で足し算などの四則演算ができる。

widthの値を決める時にpaddingの値を引いて行う時がある。
中途半端な数字を毎回計算するのもめんどいし、どこから参照したのかを覚えておくのも面倒なので、sassの演算処理を学習する。
割り算の場合は計算式を()で囲む必要がある。
lecture20.scssに四則計算を書いてある。
あまりを出すのが%を使用。
計算する数値の単位は計算する値に単位を付ければ、後ろにはつけなくても前と同じ単位を適用してくれるのでつけなくても大丈夫。

別の単位で記入すると変換できるものに関しては変換して計算される。
組み合わせによっては計算できないものがある。
計算できないものについては、Incompatibleというエラーが出るて出力できない。

変数と演算は同時に使用する事ができる。
四則演算はルール通り　足し算より掛け算が優先される。

各演算子を使う時の注意点を確認する。 

+は足し算の他に文字列を接続するのにも使用できる。
-(引き算)には前後にスペースを入れないといけない。
スペースを開けないと-32とするとマイナス32の数字として扱われてしまうので注意。
/は割り算を適用するには条件の内1つを適用しないといけない。
・()で囲むか。
・変数を使っているか、割り算だという事がわかるので()で囲む必要なし。
・他の演算子と一緒に使用されている場合。
  割り算以外の計算が入っている場合が()で囲む必要がない。

演算は単純な式で使う必要はないが、演算の経過を明示したい場合や、変数を使用する場合、条件分岐や繰り返しの際に使用すると効果的。





