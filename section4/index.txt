基礎編：ファイルの分割とインポート
21:ファイルの分割とパーシャル
sassでは分割したファイルをインポートことでビルド時に1つのcssファイルにする事ができる。

sassファイルを2つ作る。
style1.scssとstyle2.scssを作成して、style1.scssにstyle2.scssをインポートする。
@import "style2.scss"; で相対パスでimportする。
今回は同じディレクトリにあるのでそのままの記入で今回は大丈夫。

style1.cssにはstyle2.cssの部分も出力されている事が確認できる。　

通常は読み込み専用のファイルを作って、全てのファイルを読み込むのが一般的。
styleimport.scssのように記入するのが一般的。

こうする事で１つのcssファイルで出力される。
だが、こうすると、importするファイルもそれぞれで出力されている。
全てscssをまとめたものは生成されているので、読み込まれているファイルからcssファイルを作成しない方法を学習する。
それがパーシャル。
ファイル名の前に_をつける。
インポートする場合は、パーシャルにした場合は_を省略する事ができる。
更に、拡張子の.scssも省略する事ができる。
パーシャルを読み込むときは、import "style1";と書く事ができる。

@import "style1" , "style2";と横に並べる事ができるが、多くなると見づらくなるので１行１ファイルずつ書く方がいい。

22.ネストインポート
インポートはネストの中でも使用する事ができる。　
ネストインポートする場合は、セレクタを指定して、
#contetnts {
  @import "style_22_lesson"
}と記載するといい。

ネストインポートの使用の方法は、サイト内で共通のcssを読み込んで使用していて新しいコンテンツで共通のcssの内容を上書きしたいときユニークなidをページに、指定して上書きする事がよくある。
cssではユニークなidを毎回書くのは面倒で、sassでネストして書いても全て１段ネストした状態で書くのも微妙でネストインポートが役に立つ。

パーシャルにsectionのpタグを設定しているとき、そのパーシャルを読み込むとsectionの中のpタグは全 てパーシャルで設定されている値が適用される。
インポートしてそれを設定しているpタグに別のスタイルを当てたい時は、あたらしくパーシャルを作成して、ユニークなidにスタイルを適用する事ができる。
そうするとユニークなidのなかのpタグは別のスタイルで表示する事ができる。

こうすることで固有IDのつけ忘れもしないし、固有ID自体を意識せずにコーディングする事ができる。

ネストインポートの注意点。
@at-rootを使用すると
パーシャルの親のrootではなく、importした親のセレクタの外に出される。

親セレクタの参照&を使う時も注意。親セレクタの続きに書くのは問題ないが、
セレクタの後ろに親セレクタを書くとインポートの親まで辿ってしまうので注意が必要。
scssで 下記のように記入し
p{
   #contents &{
    padding: 10px;
  }
  
インポートするファイルで下記のように書くと
#localID {
  @import 'local_22';
}

cssは、
#contents #localID p {
  padding: 10px;
}
のように表示される。
