関数
38.関数の使用
引数からデータを受け取って、あらかじめ決まった処理をする事。
関数は引数を受け取って値を返す。

.box {
  width: round(100px / 3);
}
roundで四捨五入されて、小数点以下が四捨五入されて表示される。
関数を使用するときは()に引数を入れる。
関数名には$などはいらない。

ユーザの定義の関数もある。
関数とミックスインの違いは関数は値を返す。
ミックスインはプロパティと値のセットを返す。

39.文字、数値処理関数
文字や数値に関する関数について学ぶ。
sassの関数はたくさんある。
quote関数は引数に＂＂をつけて出力するもの。
unquote関数は""を外して、表示するもの。
abs関数は絶対値を出力。
ceil関数は数値の少数部分の切り上げを行う。
floor関数は切り捨て。
round関数は四捨五入する関数。　

40.色処理関数。
指定した色コードを明るくしたり暗くしたものを表示するような処理を行ってくれる関数がある。　

rgba関数　色コード（16進）とアルファ値を引数として受け取るとcssのrgbaの書式に変更してくれる。
cssのrgbaの値には16進の値を受け入れてくれないので、sassの16進の値とアルファ値を設定して変換してくれる関数が便利。

mix関数　2つの色を混ぜた結果を表示してくれる。混ぜた色を引数として渡す事できる。そうすると2つのコードが混ざった色のコードが表示される。

lighten関数　指定した色コードに一定の割合明るくした色コードを出力する関数。
第二引数で明るくしたい割合を指定する事ができる。30%なら30％明るくした色コードが出力結果として表示される。

darken関数　逆に暗くしたい場合に一定の割合指定した色を出力する関数。
色を第一引数で指定して、第二引数で暗くする割合を指定する。　

41.配列、マップ関数
配列、マップから取り出したりつなげたりする。　

mapget関数は引数で渡したキーの値をマップから出力する。
変数は()で括る事。

42.ユーザー定義関数。
sassにあらかじめ用意されたのではなく、自作の関数。
オリジナルで作成を作る事ができる。
sum 関数を作る。
@functionで関数を作成する。
@function sum($value1, $value2){
  @return $value1 + $value2;
}

引数にはデフォルトを設定する事ができる。　
やり方はミックスインの時と同じ。
 ミックスインと同じように、最初の部分を省略したければ$value2:　〜という引数で指定すれば指定できる。

関数の中では引数、組み込みの関数、ループができる。
すでにある関数名とバッティングしないようにしないといけない。

作ろうとしている関数名がすでに存在しているかを調べる事ができる関数がある。
test: function-exist(func);と記載すると、なければfalseと表示され、あればtrueと表示される。

43.デバック用ディレクティブ
cssに値を出力せず、処理の途中結果、警告、エラーを黒い画面に表示する。
ユーザー定義関数のデバックや作成した関数の定義が間違っている時に警告を出すという事ができる。

lecure42.scssで
 @debug $sum;とするとループの回数だけdebugが表示され、その時の合計を表示している。sumがどのように動いているかがわかる。

warnはエラーが起こった時にコマンドラインにメッセージを表示する事ができる。
function sumの引数で数値以外が引数で渡されて来た時、警告を出すことをしてみる。

@function sum($value1: 50px, $value2: 50px) {
  $result: 0;
  @if type-of($value1) == number {
    $result: $value1 + $value2;
  }@else  {
      @warn "#{$value1}は 数値ではありません";
  }
  @return $result;
}
このようにして引数に文字列を与えるとコマンドラインでエラーとしてwarnの内容が出る。
一部として変数を使用するときはインターポレーションを使用すること。

errorはエラーが発生した時にコマンドラインにエラーを表示するだけでなく処理を停止する事ができる。
タスクランナーの種類やGUIツールの種類によっては表示されないこともあるので注意が必要。

51.sassを使った実際の開発。
まず最初にgulpを起動する。
サーバーが自動で立ち上がってブラウザが表示される。
ここから実装を行っていく。
ベースのscssファイルを作成する。
style.scssはインポートだけを書く
基本的なスタイルを書くbaseというscssを作成して、styleにインポートする。
_を入れることでbase.scssで個別にはファイルはビルドされない。
基本設定は特にネストは必要ないので通常通りにかけば大丈夫。
ネストは忠実にhtml通りに書き換える必要はなく、親子セレクタをネストに書き換えるというイメージで使う。
ネストでグループ化するものは、header,g_navi,contents,footerなどエリアごとやパーツごとにネストしていくのがいい。
適当な単位で分割するのがわかりやすい。


